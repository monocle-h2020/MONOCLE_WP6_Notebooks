#!/usr/bin/python3
"""
Incomplete* Gregg&Carder 1990 from various sources
* just to get ideal-sky Ed
"""

import datetime
import math
import numpy as np

# constants
etr = np.array([230.0, 270.0, 330.0, 290.0, 340.0, 370.0, 310.0, 440.0, 290.0, 330.0, 370.0, 430.0, 490.0, 390.0, 410.0, 440.0, 510.0, 470.0, 550.0, 540.0, 536.0, 540.0, 570.0, 590.0, 580.0, 558.0, 570.0, 590.0, 630.0, 610.0, 622.0, 630.0, 660.0, 680.0, 690.0, 692.0, 700.0, 710.0, 670.0, 730.0, 715.0, 710.0, 740.0, 770.0, 800.0, 832.0, 850.0, 870.0, 900.0, 930.0, 962.0, 960.0, 950.0, 930.0, 940.0, 932.0, 910.0, 890.0, 870.0, 890.0, 901.0, 904.0, 906.0, 908.0, 910.0, 911.0, 921.0, 931.0, 941.0, 951.0, 961.0, 953.0, 949.0, 1056.0, 1122.0, 1078.0, 1047.0, 879.0, 752.0, 919.0, 1062.0, 1054.0, 1047.0, 1024.0, 998.0, 1108.0, 1259.0, 1221.0, 1156.0, 1184.0, 1197.0, 1162.0, 1144.0, 1027.0, 953.0, 1004.0, 1004.0, 1317.0, 1317.0, 1141.0, 1139.0, 1115.0, 1083.0, 821.0, 858.0, 1029.0, 1026.0, 995.0, 1010.0, 1145.0, 1152.0, 1263.0, 1115.0, 733.0, 852.0, 1250.0, 1071.0, 853.0, 1250.0, 1575.0, 1674.0, 1721.0, 1799.0, 1719.0, 1638.0, 1651.0, 1663.0, 1681.0, 1698.0, 1650.0, 1621.0, 1740.0, 1812.0, 1755.0, 1740.0, 1781.0, 1791.0, 1715.0, 1701.0, 1663.0, 1724.0, 1823.0, 1760.0, 1657.0, 1693.0, 1748.0, 1691.0, 1673.0, 1656.0, 1650.0, 1407.0, 1351.0, 1727.0, 1805.0, 1690.0, 1767.0, 1835.0, 1845.0, 1792.0, 1673.0, 1711.0, 1796.0, 1892.0, 1957.0, 1961.0, 1963.0, 1856.0, 1874.0, 2036.0, 2054.0, 2135.0, 2111.0, 2004.0, 2007.0, 2024.0, 2030.0, 2066.0, 2060.0, 2028.0, 2028.0, 2029.0, 2039.0, 2101.0, 2086.0, 1992.0, 1987.0, 1959.0, 1966.0, 2010.0, 2001.0, 1946.0, 1957.0, 2022.0, 2025.0, 2038.0, 2029.0, 1982.0, 1996.0, 2063.0, 2064.0, 2067.0, 2065.0, 2054.0, 2047.0, 2011.0, 1950.0, 1687.0, 1723.0, 1874.0, 1949.0, 1938.0, 1900.0, 1909.0, 1941.0, 1954.0, 2003.0, 2003.0, 2003.0, 1973.0, 1933.0, 1871.0, 1832.0, 1890.0, 1928.0, 1925.0, 1924.0, 1956.0, 1977.0, 1953.0, 1941.0, 1939.0, 1939.0, 1913.0, 1900.0, 1872.0, 1858.0, 1744.0, 1688.0, 1725.0, 1743.0, 1828.0, 1862.0, 1891.0, 1908.0, 1922.0, 1873.0, 1843.0, 1834.0, 1830.0, 1921.0, 1959.0, 1952.0, 1948.0, 1872.0, 1859.0, 1951.0, 1941.0, 1861.0, 1858.0, 1851.0, 1840.0, 1819.0, 1847.0, 1875.0, 1893.0, 1911.0, 1889.0, 1867.0, 1875.0, 1883.0, 1878.0, 1874.0, 1870.0, 1869.0, 1889.0, 1896.0, 1840.0, 1826.0, 1817.0, 1815.0, 1823.0, 1824.0, 1860.0, 1868.0, 1848.0, 1844.0, 1844.0, 1844.0, 1852.0, 1853.0, 1805.0, 1799.0, 1884.0, 1894.0, 1861.0, 1857.0, 1857.0, 1857.0, 1822.0, 1823.0, 1852.0, 1853.0, 1866.0, 1866.0, 1861.0, 1859.0, 1810.0, 1808.0, 1765.0, 1765.0, 1761.0, 1766.0, 1797.0, 1797.0, 1794.0, 1798.0, 1818.0, 1810.0, 1763.0, 1761.0, 1752.0, 1747.0, 1729.0, 1737.0, 1772.0, 1768.0, 1751.0, 1749.0, 1742.0, 1734.0, 1726.0, 1735.0, 1744.0, 1726.0, 1709.0, 1693.0, 1677.0, 1705.0, 1733.0, 1732.0, 1731.0, 1717.0, 1704.0, 1684.0, 1666.0, 1669.0, 1671.0, 1689.0, 1701.0, 1674.0, 1656.0, 1655.0, 1654.0, 1654.0, 1654.0, 1658.0, 1661.0, 1662.0, 1663.0, 1643.0, 1630.0, 1622.0, 1616.0, 1624.0, 1629.0, 1619.0, 1612.0, 1611.0, 1610.0, 1582.0, 1564.0, 1585.0, 1600.0, 1599.0, 1598.0, 1462.0, 1371.0, 1377.0, 1415.0, 1460.0, 1505.0, 1548.0, 1581.0, 1584.0, 1576.0, 1566.0, 1557.0, 1550.0, 1543.0, 1537.0, 1531.0, 1525.0, 1519.0, 1512.0, 1506.0, 1500.0, 1494.0, 1488.0, 1481.0, 1476.0, 1472.0, 1469.0, 1466.0, 1463.0, 1460.0, 1457.0, 1454.0, 1450.0, 1447.0, 1444.0, 1441.0, 1438.0, 1435.0, 1432.0, 1429.0, 1426.0, 1423.0, 1420.0, 1417.0, 1414.0, 1411.0, 1399.0, 1374.0, 1373.0, 1298.0, 1269.0, 1245.0, 1223.0, 1205.0, 1183.0, 1148.0, 1091.0, 1062.0, 1038.0, 1022.0, 998.7, 947.2, 893.2, 868.2, 829.7, 830.3, 814.0, 786.9, 768.3, 767.0, 757.6, 688.1, 640.7, 606.2, 585.9, 570.2, 564.1, 544.2, 533.4, 501.6, 477.5, 442.7, 440.0, 416.8, 391.4, 358.9, 327.5, 317.5, 307.3, 300.4, 292.8, 275.5, 272.1, 259.3, 246.9, 244.0, 243.5, 234.8, 220.5, 190.8, 171.1, 144.5, 135.7, 123.0, 123.8, 113.0, 108.5, 97.5, 92.4, 82.4, 74.6, 68.3, 63.8, 49.5, 48.5, 38.6, 36.6, 32.0, 28.1, 24.8, 22.1, 19.6, 17.5, 15.7, 14.1, 12.7, 11.5, 10.4, 9.5, 8.6])  # extraterrestrial solar irradiance
wave = np.array([0.28, 0.281, 0.282, 0.283, 0.284, 0.285, 0.286, 0.287, 0.288, 0.289, 0.29, 0.291, 0.292, 0.293, 0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.3, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.31, 0.311, 0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.32, 0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329, 0.33, 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338, 0.339, 0.34, 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347, 0.348, 0.349, 0.35, 0.351, 0.352, 0.353, 0.354, 0.355, 0.356, 0.357, 0.358, 0.359, 0.36, 0.361, 0.362, 0.363, 0.364, 0.365, 0.366, 0.367, 0.368, 0.369, 0.37, 0.371, 0.372, 0.373, 0.374, 0.375, 0.376, 0.377, 0.378, 0.379, 0.38, 0.381, 0.382, 0.383, 0.384, 0.385, 0.386, 0.387, 0.388, 0.389, 0.39, 0.391, 0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.4, 0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409, 0.41, 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418, 0.419, 0.42, 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427, 0.428, 0.429, 0.43, 0.431, 0.432, 0.433, 0.434, 0.435, 0.436, 0.437, 0.438, 0.439, 0.44, 0.441, 0.442, 0.443, 0.444, 0.445, 0.446, 0.447, 0.448, 0.449, 0.45, 0.451, 0.452, 0.453, 0.454, 0.455, 0.456, 0.457, 0.458, 0.459, 0.46, 0.461, 0.462, 0.463, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.47, 0.471, 0.472, 0.473, 0.474, 0.475, 0.476, 0.477, 0.478, 0.479, 0.48, 0.481, 0.482, 0.483, 0.484, 0.485, 0.486, 0.487, 0.488, 0.489, 0.49, 0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.5, 0.501, 0.502, 0.503, 0.504, 0.505, 0.506, 0.507, 0.508, 0.509, 0.51, 0.511, 0.512, 0.513, 0.514, 0.515, 0.516, 0.517, 0.518, 0.519, 0.52, 0.521, 0.522, 0.523, 0.524, 0.525, 0.526, 0.527, 0.528, 0.529, 0.53, 0.531, 0.532, 0.533, 0.534, 0.535, 0.536, 0.537, 0.538, 0.539, 0.54, 0.541, 0.542, 0.543, 0.544, 0.545, 0.546, 0.547, 0.548, 0.549, 0.55, 0.551, 0.552, 0.553, 0.554, 0.555, 0.556, 0.557, 0.558, 0.559, 0.56, 0.561, 0.562, 0.563, 0.564, 0.565, 0.566, 0.567, 0.568, 0.569, 0.57, 0.571, 0.572, 0.573, 0.574, 0.575, 0.576, 0.577, 0.578, 0.579, 0.58, 0.581, 0.582, 0.583, 0.584, 0.585, 0.586, 0.587, 0.588, 0.589, 0.59, 0.591, 0.592, 0.593, 0.594, 0.595, 0.596, 0.597, 0.598, 0.599, 0.6, 0.601, 0.602, 0.603, 0.604, 0.605, 0.606, 0.607, 0.608, 0.609, 0.61, 0.611, 0.612, 0.613, 0.614, 0.615, 0.616, 0.617, 0.618, 0.619, 0.62, 0.621, 0.622, 0.623, 0.624, 0.625, 0.626, 0.627, 0.628, 0.629, 0.63, 0.631, 0.632, 0.633, 0.634, 0.635, 0.636, 0.637, 0.638, 0.639, 0.64, 0.641, 0.642, 0.643, 0.644, 0.645, 0.646, 0.647, 0.648, 0.649, 0.65, 0.651, 0.652, 0.653, 0.654, 0.655, 0.656, 0.657, 0.658, 0.659, 0.66, 0.661, 0.662, 0.663, 0.664, 0.665, 0.666, 0.667, 0.668, 0.669, 0.67, 0.671, 0.672, 0.673, 0.674, 0.675, 0.676, 0.677, 0.678, 0.679, 0.68, 0.681, 0.682, 0.683, 0.684, 0.685, 0.686, 0.687, 0.688, 0.689, 0.69, 0.691, 0.692, 0.693, 0.694, 0.695, 0.696, 0.697, 0.698, 0.699, 0.7, 0.71, 0.718, 0.724, 0.74, 0.753, 0.758, 0.763, 0.768, 0.78, 0.8, 0.816, 0.824, 0.832, 0.84, 0.86, 0.88, 0.905, 0.915, 0.925, 0.93, 0.937, 0.948, 0.965, 0.98, 0.994, 1.04, 1.07, 1.1, 1.12, 1.13, 1.145, 1.161, 1.17, 1.2, 1.24, 1.27, 1.29, 1.32, 1.35, 1.395, 1.443, 1.463, 1.477, 1.497, 1.52, 1.539, 1.558, 1.578, 1.592, 1.61, 1.63, 1.646, 1.678, 1.74, 1.8, 1.86, 1.92, 1.96, 1.985, 2.005, 2.035, 2.065, 2.1, 2.148, 2.198, 2.27, 2.36, 2.45, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0])
ah2o = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006, 0.0141, 0.0224, 0.0297, 0.0337, 0.0322, 0.0274, 0.0215, 0.0158, 0.0116, 0.0104, 0.0106, 0.0105, 0.0082, 0.0002, 0.0, 0.0, 0.0, 0.0, 0.0026, 0.1233, 0.2843, 0.4539, 0.6053, 0.7, 0.6971, 0.6357, 0.5493, 0.4543, 0.3613, 0.2779, 0.2019, 0.1315, 0.0692, 0.0226, 0.0218, 0.0172, 0.0111, 0.0005, 0.0003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009, 0.0021, 0.0033, 0.0043, 0.0047, 0.0042, 0.0031, 0.0018, 0.0007, 0.0, 0.0001, 0.0007, 0.0014, 0.0017, 0.0011, 0.0, 0.0, 0.0, 0.0, 0.0111, 0.0384, 0.0743, 0.1122, 0.1473, 0.1728, 0.1813, 0.1791, 0.1714, 0.1596, 0.1422, 0.1169, 0.0874, 0.0571, 0.0291, 0.008, 0.0, 0.0, 0.0, 0.0, 0.0011, 0.0017, 0.0015, 0.0011, 0.0005, 0.0001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004, 0.0006, 0.0008, 0.001, 0.0014, 0.0017, 0.0016, 0.0015, 0.0014, 0.0013, 0.0013, 0.0842, 0.1961, 0.3173, 0.4341, 0.5299, 0.5878, 0.6207, 0.6373, 0.6359, 0.602, 0.0125, 1.8, 2.5, 0.061, 0.0008, 0.0001, 1e-05, 1e-05, 0.0006, 0.036, 1.6, 2.5, 0.5, 0.155, 1e-05, 0.0026, 7.0, 5.0, 5.0, 27.0, 55.0, 45.0, 4.0, 1.48, 0.1, 1e-05, 0.001, 3.2, 115.0, 70.0, 75.0, 10.0, 5.0, 2.0, 0.002, 0.002, 0.1, 4.0, 200.0, 1000.0, 185.0, 80.0, 80.0, 12.0, 0.16, 0.002, 0.0005, 0.0001, 1e-05, 0.0001, 0.001, 0.01, 0.036, 1.1, 130.0, 1000.0, 500.0, 100.0, 4.0, 2.9, 1.0, 0.4, 0.22, 0.25, 0.33, 0.5, 4.0, 80.0, 310.0, 15000.0, 22000.0, 8000.0, 650.0, 240.0, 230.0, 100.0, 120.0, 19.5, 3.6, 3.1, 2.5, 1.4, 0.17, 0.0045])
ao3 = np.array([108.8411, 99.91839, 88.41132, 82.29053, 73.72144, 67.05658, 60.88139, 55.33188, 47.60609, 43.11752, 38.57454, 34.95647, 30.22307, 27.20348, 23.69695, 21.09086, 18.29978, 16.19967, 13.93906, 12.3803, 10.78346, 9.420566, 8.35963, 7.208923, 6.528836, 5.440696, 4.896627, 4.257345, 3.710555, 3.381393, 2.774755, 2.519042, 2.161861, 1.872416, 1.712187, 1.414581, 1.303047, 1.127856, 1.022035, 0.752176, 0.882209, 0.554951, 0.662405, 0.539445, 0.340044, 0.469804, 0.300598, 0.241431, 0.353645, 0.176931, 0.133923, 0.226551, 0.118254, 0.095974, 0.145348, 0.066213, 0.051007, 0.08803, 0.056746, 0.036534, 0.056638, 0.030849, 0.02111, 0.026578, 0.038602, 0.017519, 0.017437, 0.012704, 0.010501, 0.007372, 0.007998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0006, 0.0008, 0.001, 0.0011, 0.0013, 0.0015, 0.0017, 0.0019, 0.002, 0.0022, 0.0024, 0.0026, 0.0027, 0.0028, 0.0029, 0.003, 0.003, 0.0029, 0.0029, 0.0028, 0.0028, 0.0028, 0.003, 0.0033, 0.0038, 0.0043, 0.0049, 0.0054, 0.006, 0.0066, 0.0072, 0.0077, 0.0082, 0.0086, 0.0087, 0.0087, 0.0085, 0.0082, 0.0078, 0.0075, 0.0073, 0.0072, 0.0074, 0.0079, 0.0087, 0.0097, 0.0108, 0.0119, 0.0131, 0.0143, 0.0154, 0.0166, 0.0177, 0.0187, 0.0196, 0.0202, 0.0205, 0.0203, 0.0197, 0.0191, 0.0185, 0.0182, 0.0183, 0.0187, 0.0193, 0.0201, 0.0209, 0.0218, 0.0228, 0.0239, 0.025, 0.0263, 0.0279, 0.0297, 0.0317, 0.0337, 0.0358, 0.0377, 0.0394, 0.0406, 0.0412, 0.0409, 0.0399, 0.0387, 0.0377, 0.0371, 0.0373, 0.038, 0.0392, 0.0405, 0.0421, 0.0437, 0.0454, 0.0471, 0.0488, 0.0506, 0.0523, 0.0541, 0.0559, 0.0576, 0.0594, 0.0611, 0.0628, 0.0645, 0.0662, 0.0677, 0.0691, 0.0703, 0.0711, 0.0715, 0.0717, 0.0718, 0.0721, 0.0727, 0.0737, 0.0748, 0.0761, 0.0774, 0.0787, 0.0801, 0.0814, 0.0826, 0.0838, 0.0848, 0.0858, 0.0867, 0.0876, 0.0885, 0.0895, 0.0907, 0.0921, 0.0939, 0.0959, 0.098, 0.1003, 0.1026, 0.1049, 0.1072, 0.1094, 0.1115, 0.1135, 0.1151, 0.1164, 0.1173, 0.1181, 0.1186, 0.1191, 0.1194, 0.1195, 0.1193, 0.1187, 0.1179, 0.1169, 0.1159, 0.1147, 0.1136, 0.1124, 0.1113, 0.1103, 0.1093, 0.1086, 0.1082, 0.1082, 0.1089, 0.1102, 0.1117, 0.1134, 0.1152, 0.117, 0.1188, 0.1206, 0.1222, 0.1236, 0.1247, 0.1253, 0.1252, 0.1246, 0.1238, 0.1227, 0.1215, 0.1203, 0.119, 0.1177, 0.1164, 0.115, 0.1136, 0.1123, 0.1109, 0.1096, 0.1082, 0.1068, 0.1054, 0.1041, 0.1027, 0.1013, 0.1, 0.0986, 0.0972, 0.0959, 0.0945, 0.0931, 0.0917, 0.0904, 0.089, 0.0876, 0.0863, 0.0849, 0.0835, 0.0822, 0.0808, 0.0794, 0.078, 0.0767, 0.0753, 0.0739, 0.0726, 0.0712, 0.0699, 0.0685, 0.0672, 0.0659, 0.0647, 0.0636, 0.0625, 0.0615, 0.0606, 0.0597, 0.0589, 0.058, 0.0572, 0.0563, 0.0555, 0.0547, 0.0538, 0.053, 0.0521, 0.0513, 0.0505, 0.0496, 0.0488, 0.0479, 0.0471, 0.0463, 0.0454, 0.0446, 0.0437, 0.0429, 0.0421, 0.0412, 0.0404, 0.0396, 0.0387, 0.0379, 0.037, 0.0362, 0.0354, 0.0345, 0.0337, 0.0328, 0.032, 0.0312, 0.0303, 0.0295, 0.0287, 0.0278, 0.027, 0.0262, 0.0254, 0.0245, 0.0238, 0.023, 0.0223, 0.0216, 0.018, 0.015, 0.012, 0.01, 0.008, 0.007, 0.006, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])    # abs of ozone
ao2 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002, 0.005, 0.008, 0.01, 0.011, 0.01, 0.008, 0.005, 0.002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.067, 0.81, 0.65, 0.505, 0.36, 0.325, 0.248, 0.157, 0.068, 0.001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.35, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05, 0.3, 0.02, 0.0002, 0.00011, 1e-05, 0.05, 0.011, 0.005, 0.0006, 0.0, 0.005, 0.13, 0.04, 0.06, 0.13, 0.001, 0.0014, 0.0001, 1e-05, 1e-05, 0.0001, 0.001, 4.3, 0.2, 21.0, 0.13, 1.0, 0.08, 0.001, 0.00038, 0.001, 0.0005, 0.00015, 0.00014, 0.00066, 100.0, 150.0, 0.13, 0.0095, 0.001, 0.8, 1.9, 1.3, 0.075, 0.01, 0.00195, 0.004, 0.29, 0.025])  # abs of ox


def model(timestamp, lat, lon, windspeed=5, sea_p=1013.25, air_t=15, rh=60.0):
    """Spectral irradiance at sea level [W/m2 nm])
    : timestamp datetime
    : lat       latitude [degrees]
    : lon       longitude [degrees]
    : sea_p     pressure at sea level [mb]
    : air_t     dry air temperature [C]
    : rh        relative humidity [%]
    : windspeed wind speed [m/s]
    """
    td = timestamp - datetime.datetime(year=timestamp.year, month=1, day=1)
    dectime = ((24*60*60) + td.total_seconds()) / (24*60*60)  # decimal time, 1 indexed
    hemisphere = np.sign(lat)
    #  Ideal marine sky constants
    viz = 23  # horizontal visibility (km)
    am = 1    # 1 = Gregg & Carder marine
    
    #  Calculate zenith angle (deg) and earth-sun distance correction (unitless)
    sun_zenith, esd = solar(lat, timestamp)
    
    M, MP, MOZ, MPST, Ozone, precwat = atmosphere(lat, lon, dectime, sun_zenith,
                                                  sea_p, air_t, rh, hemisphere)
    
    Tr, Ta, Tw, To, Tu, Taa, Tas, Fs, Rgd, Rgs, Rs = transmissivity(lat, lon, wave, ah2o, ao3,
                                                           ao2, viz, sea_p, rh, precwat,
                                                           windspeed, am, sun_zenith,
                                                           M, MP, MOZ, MPST, Ozone)
 
    # ID, IS: direct and diffuse above surface spectral irradiance 
    Id, Is = irradiance(lat, lon, dectime, sun_zenith, esd, wave,
                      etr, ah2o, ao3, ao2, viz, sea_p, rh, precwat,
                      windspeed, am, Tr, Ta, Tw, To, Tu, Taa, Tas, Fs,
                      Rgd, Rgs, Rs)
    
    It = Id + Is  # total Ed
    return It


def irradiance(lat, lon, dectime, sun_zenith, esd, wave, etr, ah2o, ao3, ao2,
             viz, sea_p, rh, precwat, windspeed, am, TR, TA, TW, TO, TU,
             TAA, TAS, FS, RGD, RGS, RS):
    """
    calculate irradiances
    """
    IE = np.zeros(len(TR))
    ID = np.zeros(len(TR))
    IS = np.zeros(len(TR))
    #IT = np.zeros(len(TR))
    #QD = np.zeros(len(TR))
    #QS = np.zeros(len(TR))
    #QT = np.zeros(len(TR))

    for i, J in enumerate(wave):
        IE[i] = etr[i] * esd * np.cos(np.radians(sun_zenith))       # extraterrestrial Irr
        ID[i] = IE[i] * TR [i] * TA[i] *TW[i] * TO[i] * TU[i]   # direct Irr at sea surface
        IR = IE[i] * TO[i] * TU[i] * TW[i] * TAA[i] * (1-(TR[i]**0.95))*0.5 # Rayleigh scattered
        IA = IE[i] * TO[i] * TU[i] * TW[i] * TAA[i] * (TR[i]**1.5)*(1.0-TAS[i]) * FS  # aerosol scattered
        IG = ID[i] * np.cos(np.radians(sun_zenith)) *RS[i] * RGD / (1-RS[i] * RGD) + (IR + IA) * RS[i] * RGS / (1-RS[i] * RGS)  # Eq. 8 diffuse contribution from multiple ground/air interactions
    
        if J <= 0.45:
            CS = (J + 0.55) **1.8
        else:
            CS=1
    
        IS[i]= (IR + IA + IG) * CS  # diffuse Ed

    return ID, IS  # direct, diffuse Ed


def solar(lat, timestamp):
    # returns sun zenith angle and earth-sun distance
    td = timestamp - datetime.datetime(year=timestamp.year, month=1, day=1)
    daynum = round(((24*60*60) + td.total_seconds()) / (24*60*60))  
    hour = timestamp.hour    
    try:
        _ = datetime.datetime(timestamp.year, 2, 29, 0, 0)  # leap year
        year_length = 366.0
    except ValueError:
        year_length = 365.0

    day_angle = 2.0 * math.pi * (daynum - 1.0) / year_length
    # earth-sun distance
    esd = 1.00011 + 0.034221 * math.cos(day_angle) + 0.00128 * math.sin(day_angle) + 0.000719 * math.cos(2*day_angle) + 0.000077 * math.sin(2*day_angle)
    # solar declination
    sigma = 0.006918 - 0.399912*math.cos(day_angle) + 0.070257*math.sin(day_angle) - 0.006758*math.cos(2*day_angle) + 0.000907*math.sin(2*day_angle) - 0.002697*math.cos(3*day_angle) + 0.00148*math.sin(3*day_angle)
    # hour angle
    hour_angle = 15.0 * (12.0 - (hour))
    # zenith angle
    cosZ = math.sin(math.radians(lat)) * math.sin(sigma) + math.cos(math.radians(lat)) * math.cos(sigma) * math.cos(math.radians(hour_angle))
    zenith = math.acos(cosZ) * 180.0/math.pi

    return zenith, esd


def atmosphere(lat, lon, dectime, sun_zenith, sea_p, air_t, rh, hemisphere):
    """atmospheric vars
    #    M = relative optical air mass
    #    MP = pressure-corrected relative optical air mass
    #    MOZ = relative optical ozone mass
    #    MPST = pressure-corrected standard air mass
    #    Ozone = O3 concentration [atm cm)
    #    precwat = precipitable water [cm]
    """
    daynum = np.round(dectime)
    
    # Air mass, pressure corrected air mass, standard air mass and ozone air mass components
    H0 = 22.0
    M = 1.0/(math.cos(math.radians(sun_zenith)) + 0.15 * (93.885 - sun_zenith)**(-1.253))
    MP = M * sea_p/1013.25
    MOZ = (1.+(H0/6370.))/(math.cos(math.radians(sun_zenith))**2. + (2*H0/6370.))**0.5
    MPST = 1.8 * sea_p/1013.25
    
    #  Calculate precipitable water
    precwat = 0.493 * (rh/100) * (np.exp(26.23-5416/(air_t+273))) / (air_t + 273)
    
    if hemisphere==1:
        #  Northern Hemisphere
        Ozone = (235+(150+ 40*math.sin(0.9865*math.radians(daynum-30))+20*math.sin(3*math.radians(-lon))*math.sin(1.28*math.radians(lat))**2))/1000.
    else:
        #  Southern Hemisphere
        DN = daynum+152.625
        i = np.where(DN>365)
        if len(i)!=0:
            DN[i[0]] = DN[i[0]]-365

        Ozone = (235+(100+ 30*math.sin(0.9865*math.radians(DN))+20*math.sin(2*math.radians(lon-75))*math.sin(1.5*math.radians(lat))**2))/1000

    return M, MP, MOZ, MPST, Ozone, precwat


def transmissivity(lat, lon, wave, ah2o, ao3, ao2, viz, sea_p, rh,
          precwat, windspeed, am, sun_zenith, M, MP, MOZ, MPST, OZ):
    """
    #    Tr = atmospheric transmittance after Rayleigh scattering
    #    Ta = aerosol transmittance
    #    Tw = water vapor transmittance
    #    To = ozone transmittance
    #    Tu = uniformly mixed gas transmittance
    #    Taa = aerosol absorption
    #    Tas = aerosol scattering
    #    Fs = fraction of aerosol scatter that is downward
    #    Rgd = total direct reflectance
    #    Rgs = total scatter reflectance
    #    RS = sky reflectivity
    """

    # sea surface reflectance
    RgDSP = 0  # direct specular
    RgSSP = 1  # scattered specular
    Rgf = 0    # sea foam
    Rgd = 0    # total direct reflectance
    Rgs = 0    # total scattered reflectance (diffuse)

    #  Specular Reflectance
    if sun_zenith >= 40 and windspeed > 2:
        B = -7.14E-4 * windspeed +0.0618
        RgDSP = 0.0253 * np.exp(B * (sun_zenith - 40))
    else:
        RgDSP = fresnel(sun_zenith)

    #  constants for wind stress, foam 
    D1 = 2.2E-5
    D2 = 4.0E-4
    D3 = 4.5E-5
    D4 = 4.0E-5
    Rhoa = 1.2E3

    #  wind speed switches 4 m/s from flat sea, no foam to specular reflection for rough sea and sea foam from drag coefficient
    if windspeed <= 4: 
        RgSSP = 0.066 * RgSSP
        Rgf = 0.0
    elif windspeed > 4 and windspeed <= 7:
        RgSSP = 0.057 * RgSSP
        CD = (0.62+1.56 / windspeed) * 1.0E-3
        Rgf = D1 * Rhoa * CD * (windspeed**2) - D2
    else:
        RgSSP = 0.057 * RgSSP
        CD = (0.49 + 0.065 * windspeed) * 1.0E-3
        Rgf = (D3 * Rhoa * CD - D4) * (windspeed**2)
    Rgd = RgDSP + Rgf
    Rgs = RgSSP + Rgf

    # do not allow Reflectance > 1
    Rgd = np.max([Rgd, 1])
    Rgs = np.max([Rgs, 1])

    A = [1.,1.,1.]
    A[0] = 2000*(am**2)                                    # Eq21
    A[1] = np.max([0.5, 5.866*(windspeed-2.2)])            # Eq22
    A[2] = np.max([1.4E-5, 0.01527*(windspeed-2.2)*0.05])  # Eq23

    # relate particle size to relative humidity (Fitzgerald 1975)

    if rh < 100.0:
        rh = 99.9
    F = ((2.0 - rh  / 100) / (6.0 * (1.0 - rh / 100)))**(1./3.)     # Eq24

    R = [0.1, 1, 10]
    R0 = [0.03, 0.24, 2]
    Y = np.zeros(len(A))
    for J in range(3):
        DNDR=0
        for I in range(3):
            NR = A[I]*np.exp(-1.*(np.log(R[J]/R0[I]*F))**2.)/F
            DNDR = DNDR+NR
        Y[J] = np.log10(DNDR)

    G = aero_fit(np.log10(R),Y)

    alpha = -1.0*(G+3.0)
    beta = 0.55**alpha * (3.912/viz - 0.01162) * (0.02472 * (viz - 5) + 1.132)

    #  Eq 35
    if alpha <0:
        cosT = 0.82
    elif alpha > 1.2:
        cosT = 0.65
    else:
         cosT = -0.1417 * alpha + 0.82

    Alg = np.log(1 - cosT);
    Afs = Alg  * (1.4590 + Alg * (0.15950 + Alg * 0.4129))
    Bfs = Alg * (0.0783 + Alg * (-0.3824 - Alg * 0.5874))
    Fs = 1 - 0.5 * np.exp((Afs + Bfs* np.cos(np.radians(sun_zenith))) * np.cos(np.radians(sun_zenith)))
    Fsp = 1 - 0.5 * np.exp((Afs + Bfs/1.8)/1.8)

    #  Calculate transmission parameters per wavelength
    Tr = np.zeros(len(wave))
    Ta = np.zeros(len(wave))
    Tw = np.zeros(len(wave))
    To = np.zeros(len(wave))
    Tu = np.zeros(len(wave))
    Taa = np.zeros(len(wave))
    Tas = np.zeros(len(wave))
    Rs = np.zeros(len(wave))

    for i, J in enumerate(wave):
        Tr[i]  = np.exp(-MP /(J**4*(115.6406 - (1.3366 / J**2))))
        Trp    = np.exp(-MPST/(J**4 * (115.6406-(1.3366/ J**2))))
        Tao2   = beta * J**(-1.0 * alpha)
        Ta[i]  = np.exp(-Tao2 * M)
        Tw[i]  = np.exp(-0.2385 * ah2o[i] * precwat * M / (1+20.07 * ah2o[i] * precwat * M)**0.45)
        Twp    = np.exp(-0.2385 * ah2o[i] * precwat * 1.8 / (1+20.07 * ah2o[i] * precwat * 1.8)**0.45)
        To[i]  = np.exp(-ao3[i] * OZ * MOZ)
        Top    = np.exp(-ao3[i] * OZ * 1.8)
        Tu[i]  = np.exp(-1.41 * ao2[i] * MP / (1 + 118.3 * ao2[i] * MP)**0.45)
        omega  = (-0.0032 * am + 0.977) * np.exp(-0.001185 * rh * (np.log(J /0.4))**2)
        Taa[i] = np.exp(-1 * (1 - omega) * Tao2 * M)
        Taap   = np.exp(-1 * (1 - omega) * Tao2 * 1.8)
        Tas[i] = np.exp(-omega * Tao2 * M)
        Tasp   = np.exp(-omega * Tao2 * 1.8)
        Rs[i]  = Top * Twp * Taap * (0.5 * (1.0 - Trp) + (1 - Fsp) * Trp * (1 - Tasp))

    return Tr, Ta, Tw, To, Tu, Taa, Tas, Fs, Rgd, Rgs, Rs


def fresnel(Z):
      nw = 1.341
      x = math.asin(math.sin(np.radians(Z))/nw)
      z1 = (math.sin(np.radians(Z) - x))**2 / (2.0 *(math.sin(np.radians(Z) + x))**2)
      z2 = (math.tan(np.radians(Z) - x))**2 / (2.0 *(math.tan(np.radians(Z) + x))**2)
      return z1 + z2


def aero_fit(xin, yin):
    s = xin - sum(xin)/len(xin)
    sum_squares = sum(s**2.0)
    sum_pred = sum(s * yin)
    slope = sum_pred /sum_squares
    return slope

